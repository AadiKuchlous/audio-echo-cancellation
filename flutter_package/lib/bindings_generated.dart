// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/barge_detected.cpp`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class AudioEchoCancellationBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AudioEchoCancellationBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AudioEchoCancellationBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  bool bargeDetected(
    int buffer_size,
    ffi.Pointer<ffi.Int16> ai_voice,
    ffi.Pointer<ffi.Int16> microphone_signal,
  ) {
    return _bargeDetected(
      buffer_size,
      ai_voice,
      microphone_signal,
    );
  }

  late final _bargeDetectedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Int, ffi.Pointer<ffi.Int16>,
              ffi.Pointer<ffi.Int16>)>>('bargeDetected');
  late final _bargeDetected = _bargeDetectedPtr.asFunction<
      bool Function(int, ffi.Pointer<ffi.Int16>, ffi.Pointer<ffi.Int16>)>();
}
